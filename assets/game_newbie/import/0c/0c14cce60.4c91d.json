[{"__type__":"cc.Material","_name":"roll_ball","_effectAsset":{"__uuid__":"77SfZevCJOb7KbGaYdXYSg"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":false},"props":{"lightDir":{"__type__":"cc.Vec4","x":-1,"y":-1,"z":1},"radius":32,"alphaThreshold":0,"brightness":0.85,"uvOrigin":{"__type__":"cc.Vec2"},"uvSize":{"__type__":"cc.Vec2","x":1,"y":1}}}}},[{"__type__":"cc.Prefab","_name":"ballRender","data":{"__id__":1}},{"__type__":"cc.Node","_name":"ballRender","_components":[{"__type__":"cc.Sprite","node":{"__id__":1},"_materials":[{"__uuid__":"41IaL0/GJF0bGj7GCG1BUK"}],"_spriteFrame":{"__uuid__":"3dla/+vMxKKq7pC7WaesxV"},"_sizeMode":0},{"__type__":"db184M9kANGBbzdg0QZpx+y","node":{"__id__":1}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__uuid__":"54Xf8FF4hGiKy80rTfgLgE"},"fileId":"ceTIWSq+hN74gLIqYDz2qT"},"_contentSize":{"__type__":"cc.Size","width":33,"height":33},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_groupIndex":3,"groupIndex":3}],{"__type__":"cc.EffectAsset","_name":"roll_ball","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"rotateMat":{"value":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],"type":26},"lightDir":{"value":[0,0,1,0],"type":16},"uvOrigin":{"value":[0,0],"type":14},"uvSize":{"value":[1,1],"type":14},"brightness":{"value":[0.8],"type":13},"radius":{"value":[32],"type":13}},"program":"roll_ball|vs|fs"}]}],"shaders":[{"hash":2848794588,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform FragConstants {\n  mat4 rotateMat;\n  vec4 lightDir;\n  vec2 uvOrigin;\n  vec2 uvSize;\n  float brightness;\n  float radius;\n};\nconst vec2 center = vec2(0.5, 0.5);\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec2 uv = (v_uv0 - uvOrigin) / uvSize;\n  vec2 v = uv - center;\n  float dis = length(v);\n  float alpha1 = clamp(radius - dis * radius * 2., 0.0, 1.0);\n  if(alpha1 == 0.0) {\n    discard;\n  }\n  vec3 light = normalize(lightDir.xyz);\n  float z = sqrt(center.x * center.x - v.x * v.x - v.y * v.y);\n  vec3 normal = normalize(vec3(v.x, v.y, z));\n  float cosl = dot(normal, light);\n  float diffuse = max(0.0, cosl) * 0.65 + 0.33;\n  vec3 H = normalize(vec3(0.0, 0.0, 1.0) + light);\n  diffuse += pow(max(0.0, dot(H, normal)), 2.0) / 5.0;\n  vec3 v3 = (vec4(v, z, 0.0) * rotateMat).xyz;\n  v = v3.xy;\n  if(v3.z < 0.0) {\n    v.x = -v.x;\n  }\n  v = v + center;\n  v = v * uvSize + uvOrigin;\n  o *= texture(texture, v);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v + vec2(0, 0.5)).r;\n    #endif\n  o.rgb *= diffuse * brightness;\n  o.a *= alpha1;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform mat4 rotateMat;\nuniform vec4 lightDir;\nuniform vec2 uvOrigin;\nuniform vec2 uvSize;\nuniform float brightness;\nuniform float radius;\nconst vec2 center = vec2(0.5, 0.5);\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec2 uv = (v_uv0 - uvOrigin) / uvSize;\n  vec2 v = uv - center;\n  float dis = length(v);\n  float alpha1 = clamp(radius - dis * radius * 2., 0.0, 1.0);\n  if(alpha1 == 0.0) {\n    discard;\n  }\n  vec3 light = normalize(lightDir.xyz);\n  float z = sqrt(center.x * center.x - v.x * v.x - v.y * v.y);\n  vec3 normal = normalize(vec3(v.x, v.y, z));\n  float cosl = dot(normal, light);\n  float diffuse = max(0.0, cosl) * 0.65 + 0.33;\n  vec3 H = normalize(vec3(0.0, 0.0, 1.0) + light);\n  diffuse += pow(max(0.0, dot(H, normal)), 2.0) / 5.0;\n  vec3 v3 = (vec4(v, z, 0.0) * rotateMat).xyz;\n  v = v3.xy;\n  if(v3.z < 0.0) {\n    v.x = -v.x;\n  }\n  v = v + center;\n  v = v * uvSize + uvOrigin;\n  o *= texture2D(texture, v);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v + vec2(0, 0.5)).r;\n    #endif\n  o.rgb *= diffuse * brightness;\n  o.a *= alpha1;\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"FragConstants","members":[{"name":"rotateMat","type":26,"count":1},{"name":"lightDir","type":16,"count":1},{"name":"uvOrigin","type":14,"count":1},{"name":"uvSize","type":14,"count":1},{"name":"brightness","type":13,"count":1},{"name":"radius","type":13,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"roll_ball|vs|fs"}]}]